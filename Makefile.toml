[config]
default_to_workspace = false

[env]
RPI_WS281X_SYSROOT = "/usr/arm-linux-gnueabihf"

[tasks.watch]
description = "Watch files and recompile the project on change"
run_task = [
         { name = "build" },
]
watch = true

[tasks.watch_release]
description = "Watch files and recompile the project on change"
run_task = [
         { name = "build_release" },
]
watch = true

# ---- BUILD ----

[tasks.build]
description = "Build client and server"
clear = true
dependencies = ["build_client", "build_server"]

[tasks.build_release]
description = "Build client and server in release mode"
clear = true
dependencies = ["build_client_release", "build_server_release"]

[tasks.build_rpi]
description = "Build client and server for raspberry pi"
clear = true
dependencies = ["build_client", "build_server_rpi"]

[tasks.build_release_rpi]
description = "Build client and server in release mode for raspberry pi"
clear = true
dependencies = ["build_client_release", "build_server_release_rpi"]

[tasks.build_client]
description = "Build client"
install_crate = { crate_name = "wasm-pack", binary = "wasm-pack", test_arg = "-V" }
command = "wasm-pack"
args = ["build", "frontend", "--target", "web", "--out-name", "package", "--dev"]

[tasks.build_client_release]
description = "Build client in release mode"
install_crate = { crate_name = "wasm-pack", binary = "wasm-pack", test_arg = "-V" }
command = "wasm-pack"
args = ["build", "frontend", "--target", "web", "--out-name", "package", "--release"]

[tasks.build_server]
description = "Build server"
clear = true
command = "cargo"
args = ["build", "--package", "backend", "--target=x86_64-unknown-linux-gnu"]

[tasks.build_server_release]
description = "Build server in release mode"
clear = true
command = "cargo"
args = ["build", "--package", "backend", "--release", "--target=x86_64-unknown-linux-gnu"]

[tasks.build_server_rpi]
env = { "CFLAGS" = "-mfpu=vfp -mfloat-abi=hard", "RPI_WS281X_SYSROOT" = "/usr/arm-linux-gnueabihf" }
description = "Build server in debug mode for Raspberry Pi"
clear = true
command = "cargo"
args = ["build", "--package", "backend", "--target=armv7-unknown-linux-gnueabihf"]

[tasks.build_server_release_rpi]
env = { "CFLAGS" = "-mfpu=vfp -mfloat-abi=hard", "RPI_WS281X_SYSROOT" = "/usr/arm-linux-gnueabihf" }
description = "Build server in release mode for Raspberry Pi"
clear = true
command = "cargo"
args = ["build", "--package", "backend", "--release", "--target=armv7-unknown-linux-gnueabihf"]

# ---- START ----

[tasks.start]
description = "Build and start Actix server with client on port 8000"
command = "cargo"
args = ["run", "--package", "backend", "--target=x86_64-unknown-linux-gnu"]
dependencies = ["build"]

[tasks.start_release]
description = "Build and start Actix server with client on port 8000 in release mode"
command = "cargo"
args = ["run", "--package", "backend", "--release", "--target=x86_64-unknown-linux-gnu"]
dependencies = ["build_release"]

# ---- TEST ----

[tasks.test_firefox]
description = "Test with wasm-pack in Firefox"
command = "wasm-pack"
args = ["test", "frontend", "--firefox", "--headless"]

# ---- LINT ----

[tasks.fmt]
description = "Format with rustfmt"
install_crate = { crate_name = "rustfmt-nightly", rustup_component_name = "rustfmt", binary = "rustfmt", test_arg = "--help" }
command = "cargo"
args = ["fmt", "--all"]

[tasks.fmt_check]
extend = "fmt"
description = "Check format with rustfmt"
args = ["fmt", "--all", "--", "--check"]

[tasks.clippy]
description = "Lint with Clippy"
clear = true
install_crate = { rustup_component_name = "clippy", binary = "cargo-clippy", test_arg = "--help" }
command = "cargo"
args = ["clippy", "--all-features", "--",
    "--deny", "warnings",
    "--deny", "clippy::pedantic",
    "--deny", "clippy::nursery",
    "--allow", "clippy::wildcard_imports", # for `use seed::{prelude::*, *};`
    "--allow", "clippy::future_not_send", # JS/WASM is single threaded
    "--allow", "clippy::used_underscore_binding", # some libraries break this rule
    "--allow", "clippy::eval_order_dependence", # false positives
]
